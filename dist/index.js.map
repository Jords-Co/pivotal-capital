{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/digerati/skipToMainContent.ts", "../src/digerati/formValidation.ts", "../src/digerati/currentYear.ts", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "/**\n * Skip to Main Content.\n * \n * @author <cabal@digerati.design>\n */\nexport const skipToMainContent = () => {\n    const trigger = document.querySelector('[dd-skip-to-main-content=\"trigger\"]'),\n        target = document.querySelector('[dd-skip-to-main-content=\"target\"]');\n    if (!trigger || !target) {\n        return;\n    }\n    ['click', 'keypress'].forEach((event) => {\n        trigger.addEventListener(event, (e) => {\n            if (e.type === 'keydown' && e.which !== 13) {\n                return;\n            }\n            e.preventDefault();\n            target.setAttribute('tabindex', '-1');\n            target.focus();\n        });\n    });\n};\n\n", "/**\n * Form Validation.\n * \n * @author <cabal@digerati.design>\n */\nexport const formValidation = () => {\n    class DigeratiFormValidation {\n        /**\n         * Create a New Instance.\n         *\n         * @return {void} \n         */\n        constructor() {\n            this.displayValidationErrorMessage = this.displayValidationErrorMessage.bind(this);\n            this.getErrorElements = this.getErrorElements.bind(this);\n            this.getErrorMessages = this.getErrorMessages.bind(this);\n            this.getFormFieldType = this.getFormFieldType.bind(this);\n            this.handleSubmitEvent = this.handleSubmitEvent.bind(this);\n            this.init = this.init.bind(this);\n            this.triggerFormFieldValidation = this.triggerFormFieldValidation.bind(this);\n            this.validateEmailField = this.validateEmailField.bind(this);\n            this.validateFormField = this.validateFormField.bind(this);\n            this.validateRequiredField = this.validateRequiredField.bind(this);\n        }\n\n        /**\n         * Display Validation Error Message.\n         *\n         * @param  {HTMLElement} formField    \n         * @param  {string} errorMessage \n         *\n         * @return {void}             \n         */\n        displayValidationErrorMessage(formField, errorMessage) {\n            const formFieldType = this.getFormFieldType(formField),\n                errorElements = this.getErrorElements(formField, formFieldType);\n            errorElements.message.innerHTML = errorMessage;\n            errorElements.message.style.display = 'block';\n            errorElements.border.classList.add('is-invalid');\n        }\n\n        /**\n         * Get Error Elements.\n         *\n         * @param  {HTMLElement} formField     \n         * @param  {string} formFieldType \n         *\n         * @return {Object}             \n         */\n        getErrorElements(formField, formFieldType) {\n            let errorElements = {};\n            if (formFieldType !== 'select') {\n                if (formFieldType === 'textarea' && formField.name === 'h-captcha-response') {\n                    /* hCaptcha */\n                    errorElements.border = formField.parentElement;\n                    errorElements.message = formField.parentElement.nextElementSibling;\n                } else {\n                    errorElements.border = formField;\n                    errorElements.message = formField.nextElementSibling;\n                }\n            } else {\n                errorElements.border = formField.parentElement.previousElementSibling;\n                errorElements.message = formField.parentElement.parentElement.nextElementSibling;\n            }\n            return errorElements;\n        }\n\n        /**\n         * Get Error Messages.\n         *\n         * @param  {HTMLElement} formField \n         *\n         * @return {Object}         \n         */\n        getErrorMessages(formField) {\n            const errorMessages = {},\n                formFieldErrorMessagesAttr = formField.getAttribute('dd-error-messages');\n            if (formFieldErrorMessagesAttr !== null) {\n                for (let errorMessage of Object.entries(formFieldErrorMessagesAttr.split('|'))) {\n                    let [key, value] = errorMessage[1].split(':');\n                    errorMessages[key] = value;\n                }\n            }\n            return errorMessages;\n        }\n\n        /**\n         * Get Form Field Type.\n         *\n         * @param  {HTMLElement} formField \n         *\n         * @return {string}           \n         */\n        getFormFieldType(formField) {\n            let formFieldType = formField.getAttribute('type') || formField.tagName.toLowerCase();\n            return formFieldType;\n        }\n\n        /**\n         * Handle Subit Event.\n         *\n         * @param  {event} e \n         *\n         * @return {void}   \n         */\n        handleSubmitEvent(e) {\n            e.preventDefault();\n            const submitButton = e.target,\n                parentForm = submitButton.closest('form');\n            const formFields = parentForm.querySelectorAll('input:not([type=\"submit\"]), textarea, select');\n            let formError = false;\n            formFields.forEach((formField) => {\n                const isValidField = this.validateFormField(formField);\n                if (!isValidField) {\n                    formError = true;\n                }\n            });\n            if (!formError) {\n                submitButton.removeEventListener('click', this.handleSubmitEvent);\n                submitButton.removeEventListener('touchstart', this.handleSubmitEvent);\n                submitButton.click();\n            }\n        }\n\n        /**\n         * Validate Email Field.\n         *\n         * @param  {HTMLElement} formField     \n         * @param  {string} fieldValue    \n         * @param  {string} errorMessages \n         *\n         * @return {boolean}               \n         */\n        validateEmailField(formField, fieldValue, errorMessages) {\n            let isValidField = true;\n            if (fieldValue.length > 0) {\n                isValidField = fieldValue.indexOf('@') !== -1 && fieldValue.indexOf('.') !== -1;\n                if (!isValidField) {\n                    let errorMessage = errorMessages.email === undefined\n                        ? '\"Email address\" error message not defined'\n                        : errorMessages.email;\n                    this.displayValidationErrorMessage(formField, errorMessage);\n                }\n            }\n            return isValidField;\n        }\n\n        /**\n         * Validate Form Field.\n         *\n         * @param  {HTMLElement} formField \n         *\n         * @return {boolean}           \n         */\n        validateFormField(formField) {\n            let isValidField = true,\n                fieldValue = formField.value.trim(),\n                errorMessages = this.getErrorMessages(formField);\n            /* Validate `required`` field */\n            if (formField.getAttribute('required') !== null) {\n                isValidField = this.validateRequiredField(formField, fieldValue, errorMessages);\n                if (!isValidField) {\n                    return false;\n                }\n            }\n            /* Validate `email` field */\n            if (formField.getAttribute('type') === 'email') {\n                isValidField = this.validateEmailField(formField, fieldValue, errorMessages);\n                if (!isValidField) {\n                    return false;\n                }\n            }\n            return isValidField;\n        }\n\n        /**\n         * Validate Required Field.\n         *\n         * @param  {HTMLElement} formField     \n         * @param  {string} fieldValue    \n         * @param  {object} errorMessages \n         *\n         * @return {boolean}               \n         */\n        validateRequiredField(formField, fieldValue, errorMessages) {\n            let isValidField = fieldValue.length !== 0;\n            if (!isValidField) {\n                let errorMessage = errorMessages.required === undefined\n                    ? '\"Required\" error message not defined'\n                    : errorMessages.required;\n                this.displayValidationErrorMessage(formField, errorMessage);\n            }\n            return isValidField;\n        }\n\n        /**\n         * Trigger Form Validation.\n         *\n         * @param  {HTMLElement} formField \n         *\n         * @return {void}           \n         */\n        triggerFormFieldValidation(formField) {\n            const isValidField = this.validateFormField(formField);\n            if (isValidField) {\n                const formFieldType = this.getFormFieldType(formField),\n                    errorElements = this.getErrorElements(formField, formFieldType);\n                errorElements.message.innerHTML = '';\n                errorElements.message.style.display = '';\n                errorElements.border.classList.remove('is-invalid');\n            }\n        }\n\n        /**\n         * Initialise.\n         *\n         * @return {void} \n         */\n        init() {\n            const forms = document.querySelectorAll('form');\n            forms.forEach((form) => {\n                if (!form.getAttribute('novalidate')) {\n                    /* Submit Button Event Listeners */\n                    const submitButton = form.querySelector('input[type=submit]');\n                    submitButton.addEventListener('click', this.handleSubmitEvent);\n                    submitButton.addEventListener('touchstart', this.handleSubmitEvent);\n                    /* Input and Textarea Field Event Listeners */\n                    const inputAndTextareaFields = form.querySelectorAll('input:not([type=\"submit\"]), textarea');\n                    inputAndTextareaFields.forEach((formField) => {\n                        formField.addEventListener('focus', () => {\n                            formField.removeEventListener('blur', this.triggerFormFieldValidation);\n                            formField.removeEventListener('keyup', this.triggerFormFieldValidation);\n                            formField.addEventListener('blur', () => {\n                                this.triggerFormFieldValidation(formField);\n                            }, { passive: true });\n                            formField.addEventListener('keyup', () => {\n                                this.triggerFormFieldValidation(formField)\n                            }, { passive: true });\n                        });\n                    });\n                }\n            });\n            /* Form Submit IX Trigger Event Listeners */\n            const formSubmitIxTriggers = document.querySelectorAll('[fs-formsubmit-element][data-animation-type=\"lottie\"]');\n            formSubmitIxTriggers.forEach((formSubmitIxTrigger) => {\n                formSubmitIxTrigger.addEventListener('click', () => {\n                    const parentSection = formSubmitIxTrigger.closest('section');\n                    if (!parentSection) {\n                        return;\n                    }\n                    parentSection.scrollIntoView({ behavior: 'smooth' });\n                }, { passive: true });\n            });\n        }\n    }\n    const formValidation = new DigeratiFormValidation();\n    formValidation.init();\n};\n", "/**\n * Current Year.\n * \n * @author <cabal@digerati.design>\n */\nexport const currentYear = () => {\n    const target = document.querySelector('[dd-date=\"current-year\"]');\n    if (!target) {\n        return;\n    }\n    const fullYear = new Date().getFullYear();\n    target.innerText = fullYear.toString();\n};\n\n", "import { skipToMainContent } from \"$digerati/skipToMainContent\";\nimport { formValidation } from \"./digerati/formValidation\";\nimport { currentYear } from \"$digerati/currentYear\";\n\nwindow.Webflow || [];\nwindow.Webflow.push(() => {\n  skipToMainContent();\n  formValidation();\n  currentYear();\n});"],
  "mappings": "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",
  "names": ["formValidation"]
}
